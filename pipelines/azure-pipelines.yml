trigger:
  - develop

parameters:
  - name: environment
    displayName: "Environment Selection"
    type: string
    default: dev
    values:
      - dev
      - prod

variables:
  - group: aoc-2022-${{ parameters.environment }}
  - template: vars-${{ parameters.environment }}.yml

stages:
- stage: StateStorage
  displayName: State Storage
  pool: ${{ variables.buildAgents }}
  jobs:
  - job: StateStorage
    displayName: State Storage
    steps:
      - task: AzureCLI@2
        displayName: Create State Storage
        inputs:
          azureSubscription: ${{ variables.serviceConnection }}
          failOnStandardError: true
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            #!/bin/bash
            az group create --name ${{ variables.resourceGroup }} --location uksouth
            az storage account create --resource-group ${{ variables.resourceGroup }} --name ${{ variables.storageAccountName }} --sku Standard_LRS --encryption-services blob
            az storage container create --name ${{ variables.containerName }} --account-name ${{ variables.storageAccountName }} --auth-mode login
          workingDirectory: '.'

- stage: DeployInfra
  dependsOn: StateStorage
  jobs:     
  - job: DeployInfra
    displayName: Deploy Infra
    steps:
      - task: AzureCLI@2
        displayName: Deploy
        inputs:
          azureSubscription: ${{ variables.serviceConnection }}
          failOnStandardError: true
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            echo "setting vars"
            export ARM_CLIENT_ID=$(spClientId)
            export ARM_CLIENT_SECRET=$(spClientSecret)
            export ARM_SUBSCRIPTION_ID=${{ variables.subscriptionId }}
            export ARM_TENANT_ID=${{ variables.tenantId }}

            echo "terraform init"
            terraform init
            echo "terraform validate"
            terraform validate
            echo "terraform plan"
            terraform plan
            echo "terraform apply"
            terraform apply
          workingDirectory: 'infrastructure'

- stage: DeployApp
  dependsOn: DeployInfra
  jobs:     
  - job: DeployApp
    displayName: Build App Artifact
    steps:
      - task: ArchiveFiles@2
        displayName: Create webapp Artifact
        inputs: 
          rootFolderOrFile: 'app'
          includeRootFolder: false
          archiveType: zip
          archiveFile: 'Application$(Build.BuildId).zip'
          replaceExistingArchive: true
  - deployment: Deploy
    environment: ${{ variables.environment }}
    pool: ${{ variables.buildAgents }}
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: Deploy Webapp
            inputs:
              azureSubscription: ${{ variables.serviceConnection }}
              appType: ${{ variables.webAppType }}
              appName: ${{ variables.webAppName }}
              package: 'Application$(Build.BuildId).zip'
              runtimeStack: ${{ variables.runTimeStack }}